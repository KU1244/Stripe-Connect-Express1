// Stripe Connect Express MVP ‚Äî 4 core models (+ practical fields)
// DB: PostgreSQL / Money in smallest unit (e.g., JPY=¬•1, USD=¬¢1)

/// === Generator / Datasource ===
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// === Enums ===
enum OrderStatus {
  created
  paid
  refunded
}

/// === Models ===

model User {
  id    String  @id @default(cuid())
  email String  @unique @db.VarChar(254)
  name  String? @db.VarChar(120)

  // Relations
  accounts ConnectedAccount[]
  orders   Order[]            @relation("Buyer")

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@index([email])
}

model ConnectedAccount {
  id     String @id @default(cuid())
  userId String

  /// Stripe account id (e.g., "acct_***"). Required and globally unique.
  stripeAccountId String @unique @db.VarChar(255)

  /// Operational flags mirrored from Stripe (kept in sync via webhooks).
  chargesEnabled        Boolean   @default(false)
  payoutsEnabled        Boolean   @default(false)
  detailsSubmitted      Boolean   @default(false)
  onboardingCompletedAt DateTime? @db.Timestamptz(6)

  /// Snapshot fields useful for UI/filters (non-authoritative).
  country         String? @db.VarChar(2) // e.g., "JP", "US"
  defaultCurrency String? @db.VarChar(3) // e.g., "JPY", "USD"

  /// Raw requirement info for "please verify" banners, etc.
  requirements Json?

  /// Optional: capabilities payload snapshot (card_payments, transfers, etc.)
  capabilities Json?

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[] @relation("SellerAccount")

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@index([userId])
  @@index([chargesEnabled, payoutsEnabled])
}

model Order {
  id String @id @default(cuid())

  // Who bought
  buyerId String?
  buyer   User?   @relation("Buyer", fields: [buyerId], references: [id], onDelete: SetNull)

  // Who gets paid (via ConnectedAccount)
  sellerAccountId String
  sellerAccount   ConnectedAccount @relation("SellerAccount", fields: [sellerAccountId], references: [id], onDelete: Restrict)

  // Stripe linkage
  paymentIntentId   String  @unique @db.VarChar(255) // pi_***
  checkoutSessionId String? @unique @db.VarChar(255) // cs_*** (optional but handy)
  transferId        String? @unique @db.VarChar(255) // tr_*** (destination charges)

  // Money (smallest unit, e.g., JPY: 1=¬•1, USD: 1=1¬¢)
  amount      Int // total amount paid by customer
  platformFee Int // fee captured by the platform
  currency    String      @db.VarChar(3) // "JPY", "USD"
  status      OrderStatus @default(created)

  // Debug/trace
  metadata Json?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@index([sellerAccountId])
  @@index([buyerId])
  @@index([createdAt])
}

model WebhookEvent {
  /// Local primary key
  id String @id @default(cuid())

  /// Stripe event id for idempotency (e.g., "evt_***")
  stripeEventId String @unique @db.VarChar(255)

  type        String    @db.VarChar(64) // e.g., "payment_intent.succeeded"
  payload     Json
  processedAt DateTime? @db.Timestamptz(6)

  createdAt DateTime @default(now()) @db.Timestamptz(6)

  @@index([type])
}

/// === Design Notes ===
///
/// üí∞ Money Storage
/// - Use INT in the smallest currency unit to avoid floating-point errors.
/// - JPY: 1 = ¬•1 (no decimals). USD: 1 = 1¬¢ (100 = $1).
///
/// üîÑ Idempotency
/// - WebhookEvent.stripeEventId prevents duplicate webhook processing.
/// - Order.paymentIntentId prevents duplicated order creation.
///
/// üîê Data Integrity
/// - ConnectedAccount.onDelete: Cascade (deleting a user removes their accounts).
/// - Order.buyer.onDelete: SetNull (keep history if buyer is removed).
/// - Order.sellerAccount.onDelete: Restrict (can't remove an account with sales).
///
/// üß≠ Helpful Snapshots
/// - ConnectedAccount.country / defaultCurrency / capabilities / requirements
///   are snapshots to render UI and filters quickly. The source of truth is Stripe.
///
/// üì¶ Practical Links
/// - Order.checkoutSessionId and Order.transferId are optional but very useful
///   for audits and cross-checking in Stripe Dashboard.
